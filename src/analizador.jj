PARSER_BEGIN(analizador)

public class analizador {
    public static void main(String[] args)throws ParseException, Exception, TokenMgrError{
        try{
            analizador analyzer = new analizador(System.in);
            analyzer.Start();
            System.out.println("Lexico y sintactico sin errores");
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }
}
PARSER_END(analizador)
//Ignorar
SKIP :
{
    " "|
    "\t"
}
//Palabras reservadas
TOKEN : {<DEF: "def">}
TOKEN : {<END: "end">}
TOKEN : {<DO: "do">}
TOKEN : {<RETURN: "return">}
TOKEN : {<PUTS: "puts">}
TOKEN : {<GETS: "gets">}
TOKEN : {<NIL: "nil">}
TOKEN : {<IN: "in">}
TOKEN : {<LineBreak: ("\r\n"|"\n")>}
//Condicionales
TOKEN: {<IF: "if">}
TOKEN: {<ELSE: "else">}
//ciclos
TOKEN: {<FOR: "for">}
//Simbolos
TOKEN: {<PLUS: "+">}
TOKEN: {<MINUS: "-">}
TOKEN: {<POR: "*">}
TOKEN: {<DIVIDE: "/">}
TOKEN: {<INCREMENT: "++">}
TOKEN: {<DECREMENT: "--">}
TOKEN: {<LPAREN: "(">}
TOKEN: {<RPAREN: ")">}
TOKEN: {<LBRACKET: "[">}
TOKEN: {<RBRACKET: "]">}
TOKEN: {<LBRACE: "{">}
TOKEN: {<RBRACE: "}">}
TOKEN: {<ASIGNATION: "=">}
TOKEN: {<QUOTE: "\"">}
TOKEN: {<COMMA: ",">}
TOKEN: {<COLON: ":">}
TOKEN: {<CAT: "#">}
//Operadores lógicos
TOKEN: {<LESS: "<">}
TOKEN: {<LESSEQ: "<=">}
TOKEN: {<BIG: ">">}
TOKEN: {<BIGEQ: ">=">}
TOKEN: {<EQUALS: "==">}
TOKEN: {<AND: "and">}
TOKEN: {<OR: "or">}
TOKEN: {<NOT: "not">}
TOKEN: {<TRUE: "true">}
TOKEN: {<FALSE: "false">}
//Cadenas
TOKEN : {<NUMBER: ((["0"-"9"])+|(["0"-"9"])+"."(["0"-"9"])+)>}
TOKEN : {<TEXT : (["a"-"z","A"-"Z","0"-"9"])+>}


void String():
{}
{
    <QUOTE><TEXT>[(Interpolacion()|<TEXT>)+]<QUOTE>
}
void Params():
{}
{
    /***
    * miFuncion(param1[,param2,...])
    */
    <LPAREN><TEXT>[(<COMMA><TEXT>)+]<RPAREN>
}
void Interpolacion():
{}
{
    //Operaciones()
    <CAT><LBRACE>(<TEXT>|<NUMBER>)<RBRACE>
}
void Array():
{}
{
    <LBRACKET>[(<TEXT>|<NIL>|String()|<NUMBER>|<TRUE>|<FALSE>)[(<COMMA>(<TEXT>|<NIL>|String()|<NUMBER>|<TRUE>|<FALSE>))+]]<RBRACKET>
}
void Start():
{}
{
    /**
    * Las funciones van primero que las instrucciones del programa, se pueden definir las funciones que el usuario desee
    * def functionName(params+)
    *   //Code
    * end
    * Code
    */
    (Function())+|
    Code()
}
void Function():
{}
{
    <DEF><TEXT>[Params()]<LineBreak>
        Code()
    <END><LineBreak>
}
void Code():
{}
{
    (
        //If()|
        For()|
        Puts()|
        //Gets()
        Variables()
    )+
}
void Variables():
{}
{
    /***
    * variable = 0 | variable = "" | variable = nil | variable = false | variable = variable2
    *
    */
    <TEXT><ASIGNATION>((<NUMBER>|String()|<NIL>|<TRUE>|<FALSE>|<TEXT>[Params()])|
    /***
    * variable = functionName | variable = functionName(param1, ...)
    *
    * variable = [] | variable = [var1, nil, 2, "cadena", false, [...]
    */
    Array())<LineBreak>
}
void Puts():
{}
{
    /***
    * puts variable | puts "Hola mundo" | puts "me llamo #{nombre} y tengo #{edad} añazos"
    */
    <PUTS>(String()|Interpolacion()|<TEXT>)<LineBreak>
}
void For():
{}
{
    /***
    * for i in 10|[var,"hola",3,false]|"texto" | for i in array|string variable
    */
    <FOR><TEXT><IN>(<NUMBER>|String()|<TEXT>|Array())<LineBreak>
        Code()
    <END><LineBreak>
}
